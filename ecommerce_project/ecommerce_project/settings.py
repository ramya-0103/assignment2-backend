"""
Django settings for ecommerce_project project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os # Import the os module
import dj_database_url # Import dj_database_url for dynamic database settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 1. READ SECRET_KEY FROM ENVIRONMENT VARIABLE FOR PRODUCTION
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-k83q*kx%yv9g1$9bmz8o$_svf!ofmtc-igrwc%963v3evz(5=7')

# SECURITY WARNING: don't run with debug turned on in production!
# 2. SET DEBUG based on environment
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# 3. CONFIGURE ALLOWED_HOSTS for Render
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
# if DEBUG:
ALLOWED_HOSTS = ['*'] # Allows all hosts in development mode


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store',
    'rest_framework',
    'rest_framework.authtoken', 
    # Add whitenoise
    'whitenoise.runserver_nostatic', 
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication', 
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' 

MIDDLEWARE = [
    # 4. ADD WhiteNoiseMiddleware IMMEDIATELY AFTER SecurityMiddleware
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce_project.wsgi.application'


# Database
# 5. DYNAMIC DATABASE CONFIGURATION USING DATABASE_URL
# This supports PostgreSQL on Render (via the DATABASE_URL environment variable) 
# and defaults to the provided local configuration if DATABASE_URL is not set.

if 'DATABASE_URL' in os.environ:
    # Production database configuration (PostgreSQL)
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            conn_health_check=True,
            ssl_require=not DEBUG # Enforce SSL unless in local development
        )
    }
else:
    # Development database configuration (If you still want to use MySQL locally)
    DATABASES = {
        # 'default': {
        #     'ENGINE': 'django.db.backends.mysql',
        #     'NAME': 'ecommerce_db', 
        #     'USER': 'root', 
        #     'PASSWORD': 'ramya',
        #     'HOST': 'localhost',
        #     'PORT': '3306',
        #     'OPTIONS': {
        #         'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        #     }
        # }
        
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# 6. STATIC FILE CONFIGURATION for WhiteNoise
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Custom settings
# FIX: Redirect users to the homepage ('/') after a successful login
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'